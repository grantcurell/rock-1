######################################################
################# Setup Kafka ########################
######################################################
---

- name: "Create Directories"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u+rw,g+rw
  with_items:
    - "{{ zookeeper_dir }}"
    - "{{ kafka_dir }}"

- name: Install Kafka Templates
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ kafka_dir }}/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - deploy.yml
    - kafka-service.yml
    - kafka-pvc-data.yml
    - server.properties
    - zookeeper-pvc-data.yml
    - zookeeper_config_map

- name: Install Zookeeper Templates
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ zookeeper_dir }}/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - zookeeper-pvc-data.yml
    - zookeeper_config_map

- name: Flush Config Maps
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" delete configmap {{ item }}'
  ignore_errors: yes
  with_items:
    - kafka-config-map
    - zookeeper-config-map

- name: Flush Kafka PVCs and Service
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" delete -f {{ kafka_dir }}/{{ item }}.yml'
  ignore_errors: yes
  with_items:
    - kafka-pvc-data
    - kafka-service

- name: Flush Zookeeper PVC
  command: 'kubectl --kubeconfig {{ kubernetes_conf_file }} delete -f {{ kafka_dir }}/zookeeper-pvc-data.yml'
  ignore_errors: yes

- name: Flush Deployment
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" delete -f {{ kafka_dir }}/deploy.yml'
  ignore_errors: yes

# This task uses kafka_config_map and feeds it into Kubernetes as a configuration map which it then uses
# to build the container
- name: Create Kafka Config
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" create configmap kafka-config-map --from-file {{ kafka_dir }}/server.properties'

# This does the same, but with Zookeeper
- name: Create Zookeeper Config
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" create configmap zookeeper-config-map --from-file {{ zookeeper_dir }}/zookeeper_config_map'

- name: Deploy Kafka
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" create -f {{ kafka_dir }}/{{ item }}.yml'
  with_items:
    - kafka-pvc-data
    - kafka-service

- name: Deploy Zookeeper
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" create -f {{ zookeeper_dir }}/{{ item }}.yml'
  with_items:
    - zookeeper-pvc-data

- name: Wait for PVCs to Bind
  shell: "while [ $(kubectl --kubeconfig {{ kubernetes_conf_file }} get pvc | grep {{ item }} | awk '{ print $2}') != 'Bound' ]; do echo -n .; sleep 1; done;"
  with_items:
    - "{{ kafka_pv_data }}"
    - "{{ zookeeper_pv_data }}"

- name: Run the kafka/zookeeper deploy file
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" create -f {{ kafka_dir }}/deploy.yml'

- name: Wait for deployment to finish
  command: 'kubectl --kubeconfig="{{ kubernetes_conf_file }}" rollout status -f {{ kafka_dir }}/deploy.yml'

#- name: Create Topics
#  command: >
#    docker exec {{ kafka_container_name }} {{ kafka_install_dir }}/bin/kafka-topics.sh
#      --zookeeper zookeeper:{{ zookeeper_port }}
#      --create
#      --replication-factor 1
#      --topic {{ item }}-raw
#      --partisions 1
#  with_items:
#    - bro
#    - suricata
#    - fsf
