######################################################
################# Setup Elasticsearch ################
######################################################
---

- name: 'Download Elasticsearch container'
  docker_image:
    name: "{{ elastic_container }}:{{ elastic_ver }}"

- name: Create elasticsearch group
  group:
    name: "{{ es_group }}"
    state: present

- name: Add Elasticsearch user
  user:
    name: "{{ es_user }}"
    comment: "User for managing elasticsearch related things"
    group: "{{ es_group }}"

- name: "Create Elasticsearch directory"
  file:
    group: "{{ es_group }}"
    mode: u+rw,g+rw
    owner: "{{ es_user }}"
    path: "{{ es_data_dir }}"
    state: directory

- name: "Create Elasticsearch configuration directory"
  file:
    group: "{{ es_group }}"
    mode: u+rw,g+rw
    owner: "{{ es_user }}"
    path: "{{ es_config_dir }}"
    state: directory

- name: "Create Elasticsearch log directory"
  file:
    group: "{{ es_group }}"
    mode: u+rw,g+rw
    owner: "{{ es_user }}"
    path: "{{ es_log_dir }}"
    state: directory

  #chown -R 1000:1000 /data/elasticsearch/
#- name: Change permissions of Elasticsearch directory
  #shell: chmod ug+wrx /data/elasticsearch/

- name: "Setup elasticsearch config"
  template:
    dest: "{{ rock_compose_files }}/elasticsearch.compose.yml"
    group: "{{ es_group }}"
    mode: 755
    owner: "{{ es_user }}"
    src: templates/elasticsearch.compose.yml.j2

- name: "Setup elasticsearch jvm options"
  template:
    dest: "{{ es_config_dir }}/jvm.options"
    group: "{{ es_group }}"
    mode: 755
    owner: root
    src: templates/es-jvm.options.j2

- name: "Install ROCK Elasticsearch cleanup script"
  template:
    dest: /usr/local/bin/es_cleanup.sh
    group: root
    mode: 755
    owner: root
    src: templates/es_cleanup.sh.j2

- name: "Set elasticsearch cleanup cron job"
  cron:
    cron_file: rocknsm_es_maintenance
    hour: 0
    job: "/usr/local/bin/es_cleanup.sh > /dev/null 2>&1"
    minute: 1
    name: "ES maintenance"
    user: root

- name: "Setup elasticsearch service"
  template:
    dest: /lib/systemd/system/elasticsearch.service
    group: "{{ es_group }}"
    mode: 755
    owner: root
    src: templates/elasticsearch.service.j2

- name: "Enable and start Elasticsearch"
  systemd:
    enabled: yes
    name: elasticsearch
    state: started
    daemon-reload: yes

- name: "Restart haproxy service"
  systemd:
    name: haproxy
    state: restarted
  when: "'primary-servers' in group_names"

# TODO: This will not work because this port is not exposed
#- name: "Wait for Elasticsearch to become ready"
#  wait_for: "host={{ inventory_hostname }} port=9200"
#  when: "'primary-servers' in group_names"

- name: "Check for Bro mapping templates"
  uri:
    method: GET
    url: "http://{{ inventory_hostname }}:9200/_template/bro_index"
  failed_when: false
  register: bro_mapping
  when: "'primary-servers' in group_names"

- name: "Load Bro Elasticsearch mapping templates"
  uri:
    body: "{{ lookup('file', 'es-bro-mappings.json')}}"
    body_format: json
    method: PUT
    url: "http://{{ inventory_hostname }}:9200/_template/bro_index"
  when: "'primary-servers' in group_names and bro_mapping is defined and bro_mapping is defined and bro_mapping.status == '404'"
